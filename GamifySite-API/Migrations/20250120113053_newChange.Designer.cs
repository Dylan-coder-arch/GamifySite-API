// <auto-generated />
using System;
using GamifySite_API.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GamifySite_API.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20250120113053_newChange")]
    partial class newChange
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GamifySite_API.Models.Payment", b =>
                {
                    b.Property<Guid>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("PaymentTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uuid");

                    b.HasKey("PaymentID");

                    b.HasIndex("UserID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("GamifySite_API.Models.Rating", b =>
                {
                    b.Property<Guid>("RatingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("RatingValue")
                        .HasColumnType("numeric");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VoucherID")
                        .HasColumnType("uuid");

                    b.HasKey("RatingID");

                    b.HasIndex("UserID");

                    b.HasIndex("VoucherID");

                    b.ToTable("Rating");
                });

            modelBuilder.Entity("GamifySite_API.Models.Spin", b =>
                {
                    b.Property<Guid>("SpinID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SpinName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SpinID");

                    b.ToTable("Spinners");
                });

            modelBuilder.Entity("GamifySite_API.Models.SpinPrize", b =>
                {
                    b.Property<Guid>("SpinPrizeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Probability")
                        .HasColumnType("numeric");

                    b.Property<Guid>("SpinID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VoucherID")
                        .HasColumnType("uuid");

                    b.HasKey("SpinPrizeID");

                    b.HasIndex("SpinID");

                    b.HasIndex("VoucherID");

                    b.ToTable("SpinnersPrize");
                });

            modelBuilder.Entity("GamifySite_API.Models.SpinWinner", b =>
                {
                    b.Property<Guid>("SpinWinnerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateWon")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SpinPrizeID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WinnerID")
                        .HasColumnType("uuid");

                    b.HasKey("SpinWinnerID");

                    b.HasIndex("SpinPrizeID");

                    b.HasIndex("WinnerID");

                    b.ToTable("SpinWinner");
                });

            modelBuilder.Entity("GamifySite_API.Models.Tag", b =>
                {
                    b.Property<Guid>("TagID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagDefID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VoucherID")
                        .HasColumnType("uuid");

                    b.HasKey("TagID");

                    b.HasIndex("TagDefID");

                    b.HasIndex("VoucherID");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("GamifySite_API.Models.TagDef", b =>
                {
                    b.Property<Guid>("TagDefID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("TagColor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TagDefID");

                    b.ToTable("TagsDef");
                });

            modelBuilder.Entity("GamifySite_API.Models.User", b =>
                {
                    b.Property<Guid>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GamifySite_API.Models.Vendor", b =>
                {
                    b.Property<Guid>("VendorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VendorAddressID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VendorCategoryID")
                        .HasColumnType("uuid");

                    b.Property<string>("VendorName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VendorStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("VendorID");

                    b.HasIndex("UserID");

                    b.HasIndex("VendorAddressID");

                    b.ToTable("Vendors");
                });

            modelBuilder.Entity("GamifySite_API.Models.VendorAddress", b =>
                {
                    b.Property<Guid>("VendorAddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("VendorAddressID");

                    b.ToTable("VendorAddresses");
                });

            modelBuilder.Entity("GamifySite_API.Models.VendorCategory", b =>
                {
                    b.Property<Guid>("VendorCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("VendorCategoryID");

                    b.ToTable("VendorCategories");
                });

            modelBuilder.Entity("GamifySite_API.Models.Voucher", b =>
                {
                    b.Property<Guid>("VoucherID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Special1")
                        .HasColumnType("boolean");

                    b.Property<bool>("Special2")
                        .HasColumnType("boolean");

                    b.Property<bool>("Special3")
                        .HasColumnType("boolean");

                    b.Property<int>("Stock")
                        .HasColumnType("integer");

                    b.Property<Guid>("VendorID")
                        .HasColumnType("uuid");

                    b.Property<bool>("Visible")
                        .HasColumnType("boolean");

                    b.Property<decimal>("VoucherAmount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("VoucherExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VoucherLocation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VoucherName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VoucherStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VoucherType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("VoucherID");

                    b.HasIndex("VendorID");

                    b.ToTable("Vouchers");
                });

            modelBuilder.Entity("GamifySite_API.Models.VoucherDetail", b =>
                {
                    b.Property<Guid>("VoucherDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClaimedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ClaimedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ClaimedUserUserID")
                        .HasColumnType("uuid");

                    b.Property<string>("VoucherCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VoucherCodeStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("VoucherID")
                        .HasColumnType("uuid");

                    b.HasKey("VoucherDetailID");

                    b.HasIndex("ClaimedUserUserID");

                    b.HasIndex("VoucherID");

                    b.ToTable("VouchersDetail");
                });

            modelBuilder.Entity("GamifySite_API.Models.Payment", b =>
                {
                    b.HasOne("GamifySite_API.Models.User", "Payer")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payer");
                });

            modelBuilder.Entity("GamifySite_API.Models.Rating", b =>
                {
                    b.HasOne("GamifySite_API.Models.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamifySite_API.Models.Voucher", "Voucher")
                        .WithMany("Ratings")
                        .HasForeignKey("VoucherID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("GamifySite_API.Models.SpinPrize", b =>
                {
                    b.HasOne("GamifySite_API.Models.Spin", "Spin")
                        .WithMany("SpinPrizes")
                        .HasForeignKey("SpinID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamifySite_API.Models.Voucher", "Voucher")
                        .WithMany()
                        .HasForeignKey("VoucherID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Spin");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("GamifySite_API.Models.SpinWinner", b =>
                {
                    b.HasOne("GamifySite_API.Models.SpinPrize", "SpinPrize")
                        .WithMany()
                        .HasForeignKey("SpinPrizeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamifySite_API.Models.User", "Winner")
                        .WithMany()
                        .HasForeignKey("WinnerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SpinPrize");

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("GamifySite_API.Models.Tag", b =>
                {
                    b.HasOne("GamifySite_API.Models.TagDef", "TagDefinition")
                        .WithMany()
                        .HasForeignKey("TagDefID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamifySite_API.Models.Voucher", "Voucher")
                        .WithMany()
                        .HasForeignKey("VoucherID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TagDefinition");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("GamifySite_API.Models.Vendor", b =>
                {
                    b.HasOne("GamifySite_API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamifySite_API.Models.VendorAddress", "Address")
                        .WithMany()
                        .HasForeignKey("VendorAddressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GamifySite_API.Models.Voucher", b =>
                {
                    b.HasOne("GamifySite_API.Models.Vendor", "Vendor")
                        .WithMany("Vouchers")
                        .HasForeignKey("VendorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("GamifySite_API.Models.VoucherDetail", b =>
                {
                    b.HasOne("GamifySite_API.Models.User", "ClaimedUser")
                        .WithMany()
                        .HasForeignKey("ClaimedUserUserID");

                    b.HasOne("GamifySite_API.Models.Voucher", "Voucher")
                        .WithMany()
                        .HasForeignKey("VoucherID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClaimedUser");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("GamifySite_API.Models.Spin", b =>
                {
                    b.Navigation("SpinPrizes");
                });

            modelBuilder.Entity("GamifySite_API.Models.User", b =>
                {
                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("GamifySite_API.Models.Vendor", b =>
                {
                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("GamifySite_API.Models.Voucher", b =>
                {
                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
